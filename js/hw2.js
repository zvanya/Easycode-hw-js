// Объекты
// 1. Создать объект с полем product, равным ‘iphone’
// 2. Добавить в объект поле price, равное 1000 и поле currency, равное ‘dollar’
// 3. Добавить поле details, которое будет содержать объект с полями model и color

const objProduct = {
    product: "iPhone"
};
product["price"] = 1000;
product.currency = "dollar";
product.details = {
    model: null,
    color: null
};


// ******************************************************************************
// Преобразование примитивов
// Чему равно а, почему?

// Во всех заданиях выполняется сначала сравнение потом присваивание.
// Операции сравнения возвращают оригинальное значение последнего обработанного операнда.
// Операция ИЛИ. Обработка заканчивается на операнде, который вернет true, либо, если все операнды false, то вернет значение последнего операнда.
// Операция И. Обработка заканчивается на операнде, который вернет false либо, если все операнды true, то вернет значение последнего операнда.

let a = 0 || 'string'; // "string"
// 0 - false, 'string' - true; Последний обработаный операнд - это 'string', т.к. 0 - false, а ИЛИ выполняется до тех пор пока не встретит true либо вернет значение последнего операнда.

a = 1 && 'string'; // "string"
// 1 - true, 'string' - true. Последний обработанный операнд 'string'

a = null || 25; // 25
// null - false, проверяем дальше.. 25 - true, возвращается 25. Сравнения, если бы они были еще не производились бы.

a = null && 25; // null
// null - false/ Для операции сравнения И на false сравнения заканчиваюся, и возвращается зн-е 1го операнда, который вернул false - это null.

a = null || 0 || 35; // 35
// операция ИЛИ. Выполняются сранения до первого true либо до последнего операнда. В нашем случае true возвращает последний операнд 35б значит он и вернется как результат всего логического выражения.

a = null && 0 && 35; // null
// null - false. В операциях И значение первого операнда, который вернет false возвращается как результат всего логического выражения.


// **********************************
// Что отобразится в консоли. Почему?

//12 + 14 + '12' // '2612'
//  + выполняется слева направо. 12 + 14 = 26. При сложении числа и строки + становится оператором конкатенации, т.е. число преобразуется в строку и выполняется конкатенация строк. 26 + '12' == '26' + '12' == '2612'

// 3 + 2 - '1' // 4
// слева направо. при вычитании строка преобразуется в число и возвращается результат вычисления. Если строка не преобразуется в число, например '1d', то возвращается NaN

// '3' + 2 - 1 // 31
// '3' + 3 == '32', '32' - 1 == 32 - 1 == 31

// true + 2 // 3
// true неявно преобразуется в единицу

// +'10' + 1 // 11
// +'10' - явное преобразование строки в число

// undefined + 2 // NaN
// undefined - NaN

// null + 5 // 5
// null - 0

// true + undefined //
// true - 1, undefined - NaN; 1 + NaN == NaN


// ******************************************************************************
// If else. Задачи.

// **********************************
// 1. Если переменная равна “hidden”, присвоить ей значение “visible”, иначе - “hidden”.

let visibility = "hidden";
if (visibility === "hidden") {
    visibility = "visible";
} else {
    visibility = "hidden";
}

// **********************************
// 2. Используя if, записать условие:
// a. если переменная равна нулю, присвоить ей 1;
// b. если меньше нуля - строку “less then zero”;
// c. если больше нуля - используя оператор “присвоение”, переменную умножить на 10
// (использовать краткую запись).

let k = 5;
if (k === 0) {
    k = 1;
} else if (k < 0) {
    k = "less then zero";
} else {
    k *= 10;
}

// **********************************
// 3. Дан объект let car = { name: 'Lexus', age: 10, create: 2008, needRepair: false }.
// Написать условие если возраст машины больше 5 лет то нужно вывести в консоль сообщение 'Need Repair' и свойство needRepair в объекте car изменить на true; иначе изменить на false.

let car = {
    name: 'Lexus',
    age: 10,
    create: 2008,
    needRepair: false
};

if (car.age > 5) {
    car.needRepair = true;
    console.log("Need Repair");
} else {
    car.needRepair = false;
}

// **********************************
// 4. Дан объект let item = { name: 'Intel core i7', price: '100$', discount: '15%' }.
// Написать условие если у item есть поле discount и там есть значение то в объекте item создать
// поле priceWithDiscount и записать туда цену с учетом скидки и вывести ее в консоль, обратите
// внимание что поля discount и price это строки и вам из них нужно получить числа чтобы выполнить
// расчет. иначе если поля discount нет то вывести просто поле price в консоль.

let item = {
    name: 'Intel core i7',
    price: '100$',
    discount: '15%'
};

if (item.hasOwnProperty("discount") && item.discount !== null) {
    console.log(item.priceWithDiscount = parseFloat(item.price) - parseFloat(item.discount) / 100 * parseFloat(item.price) + "%");
} else {
    console.log(item.price);
}


// **********************************
// 6. Дан следующий код:
// let product = {
//     name: “Яблоко”,
//     price: “10$”
// };
// let min = 10; // минимальная цена
// let max = 20; // максимальная цена
// Написать условие если цена товара больше или равна минимальной цене и меньше или равна максимальной
// цене то вывести в консоль название этого товара, иначе вывести в консоль что товаров не найдено.

let product = {
    name: "Яблоко",
    price: "10$"
};

let min = 10; // минимальная цена
let max = 20; // максимальная цена

let productPrice = parseFloat(product.price);

if (productPrice >= min && productPrice <= max) {
    console.log(product.name);
} else {
    console.log(`Товары в ценовом диапазоне от ${min}$ до ${max}$ не найдены.`);
}
